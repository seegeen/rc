set nocompatible              " be iMproved, required
filetype off                  " required

" BAD HABIT FIX
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" Color
Plugin 'arcticicestudio/nord-vim'

"Utilities
Plugin 'christoomey/vim-tmux-navigator' "Move between panes
Plugin 'tpope/vim-obsession' "resotre session
Plugin 'dhruvasagar/vim-prosession' "auto obsession
Plugin 'ConradIrwin/vim-bracketed-paste' "Auto :set paste for modern terms
Plugin 'tmux-plugins/vim-tmux-focus-events' "Fixes focus issue in tmux
Plugin 'Lokaltog/vim-easymotion' "better search
Plugin 'kien/ctrlp.vim' "Open file
Plugin 'sjl/gundo.vim' "Graphical undo
"Airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Language support "
Plugin 'vim-perl/vim-perl'
Plugin 'pangloss/vim-javascript'
Plugin 'elzr/vim-json'
Plugin 'cakebaker/scss-syntax.vim'

" DM
Plugin 'nfvs/vim-perforce'

call vundle#end()            " required

"Compatability
set encoding=utf8
set t_Co=256
"Colors
"set termguicolors
set background=dark
let g:nord_italic = 1
let g:nord_underline = 1
let g:nord_italic_comments = 1
"let g:nord_comment_brightness = 15
"let g:nord_cursor_line_number_background = 1
"let g:nord_uniform_diff_background = 1
colorscheme nord

"Copy/Paste
set clipboard=unnamedplus "always add + (sends to cliboard)
" paste mode - this avoid unexpceted effects pasting from other window
set pastetoggle=<F11>

"Space between lines
set linespace=2
"Show tabs in gvim not vim
set showtabline=2
"Max number of tabs
set tabpagemax=15

" make shell not suck Thanks Modules :(
set shellcmdflag+=f

"use visual bell instead of beeping
set vb

"set incremental search
set incsearch

"syntax highlighting
syntax on
filetype plugin indent on


"2 space tabs
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2

" Word wrap w/o line breaks "
set wrap
set linebreak
set list
set nostartofline

" Delays
set timeoutlen=1000
set ttimeoutlen=10

"show matching brakets
autocmd FileType perl set showmatch

"show line numbers
set number

"Customization and plugin mapping "
let mapleader=","

" Screw backups "
set nobackup nowritebackup noswapfile

" make tab in v ident code
vmap <tab> >gv
vmap <s-tab> <gv

" make tab in normal mode ident code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

" Toggle relative numbers  on FocusLost
autocmd FocusLost * :set number norelativenumber
" Using vim-tmux-navigator bindings, on FocusLost ^[[O was left behind
autocmd FocusLost * silent redraw!
autocmd FocusGained * :set number relativenumber
" Toggle relative numbers in insert mode
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set number relativenumber

"Make buffers fun
nnoremap <Leader>b :ls<CR>:buffer<Space>
nnoremap <leader>bd :bufdo bd

"Airline "
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline) "
autocmd VimEnter * AirlineToggleWhitespace
let g:airline_powerline_fonts=1
"let g:airline_theme='tomorrow'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
"let g:airline#extensions#tabline#buffer_idx_mod = 1

"Ctrlp "
noremap <Leader>b <ESC>:CtrlPBuffer<CR>
noremap <Leader><SPACE> <ESC>:CtrlPMRUFiles<CR>
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_use_caching = 0
let g:ctrlp_custom_ignore = '\v[\/](_build|(\.(git|hg|svn)))$'
let g:ctrlp_root_markers = ['.p4ignore','.ctrlpstop']
let g:ctrlp_max_depth = 10
let g:ctrlp_max_files = 0 "
set wildignore+=*/tmp/*,*.o,*.so,*.swp,*.zip,*.jar,*.class,*.pdf,*.gif,*.png,*.jpg,*.o,*.hi "
if executable("ag")
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
        \ }
endif

" gundo "
nnoremap <Leader>u :GundoToggle<CR>

" folds! "
set foldenable
set foldmethod=syntax
set foldnestmax=2
set foldlevel=1
set foldlevelstart=1
set foldminlines=10
set fillchars=vert:\|,fold:\
let perl_fold=1
noremap <Leader>f zR
" Toggle folds with space "
fu! ToggleFold()
  if foldlevel('.') == 0
    normal! l
  else
    if foldclosed('.') < 0
      . foldclose
    else
      . foldopen
    endif
  endif
  echo
endf
noremap <space> :call ToggleFold()<CR>

"Easycommenting "
autocmd FileType js,coffee,c,cpp,java,javascript let b:comment_leader = '// '
autocmd FileType vim,rc let b:comment_leader = '" ' "
autocmd FileType conf,fstab,ruby,python,perl let b:comment_leader = '# '
noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

"syntax highlighting
syntax on
filetype plugin indent on

"Perl
" syntax color complex thing like@{${FOO}}
let perl_extended_vars = 1
let perl_include_pod = 1

set t_BE=			" Prevent copy/paste problems after exiting vim
set backspace=indent,eol,start	"Fixes issues with delete/backspace
set hlsearch 			"Fixes issues with highlighting

"define :Tidy command to run perltidy on visual selection || entire buffer"
"command -range=% -nargs=* Tidy <line1>,<line2>!perltidy
command -range=% -nargs=* Tidy <line1>,<line2>!perltidy --pro=$PERLTIDY

"run :Tidy on entire buffer and return cursor to (approximate) original position"
fun DoTidy()
    let l = line(".")
    let c = col(".")
    :Tidy
    call cursor(l, c)
endfun

"shortcut for normal mode to run on entire buffer then return to current line"
au Filetype perl nmap <Leader>t :call DoTidy()<CR>

"shortcut for visual mode to run on the the current visual selection"
au Filetype perl vmap <Leader>t :Tidy<CR>

